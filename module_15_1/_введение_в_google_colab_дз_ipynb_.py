# -*- coding: utf-8 -*-
""""Введение в Google Colab. ДЗ.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CaUk6GynTovW9OFnkgKN1J1YPL2XoBqS

1. Создание и настройка документа:

*Создайте новый документ в Google Colab.

*Переименуйте документ в "Введение в Google Colab".

2. Текстовые и кодовые ячейки:

*Вставьте текстовую ячейку и напишите краткое введение о Google Colab.

*Вставьте новую кодовую ячейку и выполните следующий код, чтобы убедиться, что среда работает

# Введение в Google Colab

Google Colab — это бесплатная облачная платформа от Google для машинного обучения и анализа данных. Она позволяет выполнять код на Python в браузере с использованием облачных ресурсов.
"""

from google.colab import drive
drive.mount('/content/drive')
print("Hello, Google Colab!")

"""3. Основы Python:

Вставьте кодовую ячейку и напишите код для выполнения следующих задач:

Создайте список из 10 случайных чисел.

Напишите функцию, которая возвращает сумму чисел в списке.

Вызовите функцию и выведите результат на экран.
"""

from google.colab import drive
drive.mount('/content/drive')
import random

# Создаем список из 10 случайных чисел
random_numbers = [random.randint(1, 100) for _ in range(10)]

# Функция для вычисления суммы чисел в списке
def sum_of_numbers(numbers):
    return sum(numbers)

# Вызов функции и вывод результата
result = sum_of_numbers(random_numbers)
print("Список случайных чисел:", random_numbers)
print("Сумма чисел в списке:", result)

"""4. Работа с библиотеками:

Установите библиотеку numpy (если она не установлена):

!pip install numpy

Импортируйте библиотеку numpy и создайте массив из 20 случайных чисел.

Вычислите среднее значение массива и выведите его на экран.
"""

from google.colab import drive
drive.mount('/content/drive')
!pip install numpy

import numpy as np

# Создаем массив из 20 случайных чисел
random_array = np.random.randint(1, 100, size=20)

# Вычисляем среднее значение массива
mean_value = np.mean(random_array)
print("Массив случайных чисел:", random_array)
print("Среднее значение массива:", mean_value)

"""5. Загрузка данных

Загрузка CSV файла и чтение данных с использованием pandas:
"""

from google.colab import drive
drive.mount('/content/drive')
!pip install pandas

import pandas as pd

# Загрузка CSV файла из интернета
url = 'https://drive.google.com/uc?id=1zO8ekHWx9U7mrbx_0Hoxxu6od7uxJqWw&export=download'
data = pd.read_csv(url)

# Вывод первых 5 строк данных
print(data.head())

"""6. Визуализация данных

Установка библиотеки matplotlib и построение графика:
"""

from google.colab import drive
drive.mount('/content/drive')
!pip install matplotlib

import matplotlib.pyplot as plt

# Convert the "Subscription Date" column to datetime format and extract the month
data['Subscription Date'] = pd.to_datetime(data['Subscription Date'], errors='coerce')
data['Subscription Month'] = data['Subscription Date'].dt.to_period('M')

# Count the number of subscriptions per month
subscriptions_per_month = data['Subscription Month'].value_counts().sort_index()

# Plot the data
plt.figure(figsize=(10, 6))
subscriptions_per_month.plot(kind='line', marker='o')
plt.title('Monthly Subscriptions Count')
plt.xlabel('Month')
plt.ylabel('Number of Subscriptions')
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

"""7. Использование генетических алгоритмов:

Скопируйте код генетического алгоритма из лекционного блокнота.

Запустите его, изучите работу кода.

Измените значение целевой переменной TARGET. Добейтесь (увеличивая при необходимости число итераций обучения) полного соответствия "нового индивида целевой переменной".
"""

from google.colab import drive
drive.mount('/content/drive')
import random

# Количество особей в каждом поколении
POPULATION_SIZE = 100

# Валидные гены
GENES = '''abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOP
QRSTUVWXYZ 1234567890, .-;:_!"#%&/()=?@${[]}'''

# Целевая строка для генерации
TARGET = "Hello!"

class Individual(object):
	'''
	Класс, представляющий отдельную особь (индивида) в популяции
	'''
	def __init__(self, chromosome):
		self.chromosome = chromosome
		self.fitness = self.cal_fitness()

	@classmethod
	def mutated_genes(self):
		'''
		Создаем случайные гены для мутации
		'''
		global GENES
		gene = random.choice(GENES)
		return gene

	@classmethod
	def create_gnome(self):
		'''
		Создаем хромосому или набор генов
		'''
		global TARGET
		gnome_len = len(TARGET)
		return [self.mutated_genes() for _ in range(gnome_len)]

	def gene_transfer(self, par2):
		'''
		Передаем гены новому поколению индивидов
		'''

		child_chromosome = []
		for gp1, gp2 in zip(self.chromosome, par2.chromosome):

			prob = random.random()

			# если вероятность меньше 0,45, берем ген
			# от родителя 1
			if prob < 0.45:
				child_chromosome.append(gp1)

			# если вероятность между 0.45 и 0.90, берем
			# ген от родителя 2
			elif prob < 0.90:
				child_chromosome.append(gp2)

			# в противном случае берем случайный ген (мутация),
			else:
				child_chromosome.append(self.mutated_genes())


		return Individual(child_chromosome)

	def cal_fitness(self):
		'''
		Рассчитываем показатель соответствия, это количество
		символов в строке, которые отличаются от целевой
		строки.
		'''
		global TARGET
		fitness = 0
		for gs, gt in zip(self.chromosome, TARGET):
			if gs != gt: fitness+= 1
		return fitness

# Driver code
def main():
	global POPULATION_SIZE

	#Текущее поколение
	generation = 1

	found = False
	population = []

	# Новое поколение
	for _ in range(POPULATION_SIZE):
				gnome = Individual.create_gnome()
				population.append(Individual(gnome))

	while not found:

		# Отсортируем популяцию в порядке возрастания оценки соответствия целевой функции
		population = sorted(population, key = lambda x:x.fitness)

		# Если у нас появился индивид, достигший целевой функции
		# цикл совершенствования можно прервать
		if population[0].fitness <= 0:
			found = True
			break

		# В противном случае - продолжаем создавать новые поколения
		new_generation = []

		# Определяем 10% популяции, наиболее соответствующих целевой фукнции
		# чтобы передать их гены будущим поколениям
		s = int((10*POPULATION_SIZE)/100)
		new_generation.extend(population[:s])


		s = int((90*POPULATION_SIZE)/100)
		for _ in range(s):
			parent1 = random.choice(population[:50])
			parent2 = random.choice(population[:50])
			child = parent1.gene_transfer(parent2)
			new_generation.append(child)

		population = new_generation

		print("Generation: {}\tString: {}\tFitness: {}".
			format(generation,
			"".join(population[0].chromosome),
			population[0].fitness))

		generation += 1


	print("Generation: {}\tString: {}\tFitness: {}".
		format(generation,
		"".join(population[0].chromosome),
		population[0].fitness))

if __name__ == '__main__':
	main()

"""8. Сохранение и совместное использование:

Сохраните ваш документ на Google Диске.

Настройте доступ к документу для общего использования и отправьте ссылку вашему преподавателю.
"""